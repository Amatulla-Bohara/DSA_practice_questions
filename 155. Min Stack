class MinStack {
    stack <int> stack1;
    stack <int> stack2;
    int topPtr;
    int minPtr;
    
public:
    MinStack() {
        
    }
    
    void push(int val) {
        stack1.push(val);
        if(stack2.empty()){
            stack2.push(val);
        }
        else{
            if(stack2.top()<stack1.top()){
                stack2.push(stack2.top());
            }
            else{
                stack2.push(stack1.top());
            }
        }
    }
    
    void pop() {
        stack1.pop();
        stack2.pop();
    }
    
    int top() {
        topPtr = stack1.top();
        return topPtr;
    }
    
    int getMin() {
        minPtr = stack2.top();
        return minPtr;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
 
 
 
 
 
 
 
 
 /*
 Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2
*/
